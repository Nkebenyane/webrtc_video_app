{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","componentDidMount","socket","io","path","query","on","success","console","log","sdp","textref","value","JSON","stringify","candidate","pc","RTCPeerConnection","onicecandidate","e","sendToPeer","oniceconnectionstatechange","ontrack","remoteVideoref","current","srcObject","streams","navigator","mediaDevices","getUserMedia","audio","video","then","stream","window","localStream","localVideoref","addStream","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","setRemoteDescription","desc","parse","RTCSessionDescription","addCandidate","forEach","addIceCandidate","RTCIceCandidate","React","createRef","style","width","height","margin","backgroundColor","ref","this","autoPlay","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81e5d9c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {io} from 'socket.io-client';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    this.candidate = []\n  }\n\n  componentDidMount = () => {\n\n    this.socket = io(\n      '/webrtcPeer',\n      {\n        path: '/webrtc',\n        query:{}\n      }\n    )\n\n    this.socket.on('connection-success', success => {\n      console.log(success)\n    })\n\n    this.socket.on('offerOrAnswer', (sdp)=>{\n      this.textref.value = JSON.stringify(sdp)\n    })\n\n    this.socket.on('candidate',(candidate) =>{\n      this.candidate = [...this.candidate, candidate]\n    })\n    const pc_config = null\n\n    // const pc_config1 = {\n    //   \"iceServers\": [\n    //     {\n    //       urls: 'stun:[STUN_IP]:[PORT]',\n    //       'credentials': '[YOR CREDENTIALS]',\n    //       'username': '[USERNAME]'\n    //     }\n    //   ]\n    // }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    this.pc = new RTCPeerConnection(pc_config)\n\n    // triggered when a new candidate is returned\n    this.pc.onicecandidate = (e) => {\n      // send the candidates to the remote peer\n      // see addCandidate below to be triggered on the remote peer\n      if (e.candidate)\n        // console.log(JSON.stringify(e.candidate))\n        this.sendToPeer('candidate', e.candidate)\n    }\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    // this.pc.onaddstream = (e) => {\n    //   this.remoteVideoref.current.srcObject = e.stream\n    // }\n\n    this.pc.ontrack = (e) => {\n      this.remoteVideoref.current.srcObject = e.streams[0]\n    }\n\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      audio: false,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n  }\n\n  sendToPeer = (messageType, payload) =>{\n    this.socket.emit(messageType , {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n  createOffer = () => {\n    console.log('Offer')\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp)\n        this.sendToPeer('offerOrAnswer',sdp)\n    })\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  createAnswer = () => {\n    console.log('Answer')\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp)\n        this.sendToPeer('offerOrAnswer',sdp)\n\n    })\n  }\n\n  setRemoteDescription = () => {\n    // retrieve and parse the SDP copied from the remote peer\n    const desc = JSON.parse(this.textref.value)\n\n    // set sdp as remote description\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  }\n\n  addCandidate = () => {\n    // retrieve and parse the Candidate copied from the remote peer\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n\n    // add the candidate to the peer connection\n    // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    this.candidate.forEach(candidate => {\n      console.log(JSON.stringify(candidate))\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.localVideoref }\n          autoPlay>\n        </video>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.remoteVideoref }\n          autoPlay>\n        </video>\n        <br />\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n\n        <br />\n        <textarea ref={ref => { this.textref = ref }} />\n\n        <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button>\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}