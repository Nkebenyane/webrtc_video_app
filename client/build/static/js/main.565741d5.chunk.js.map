{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","componentDidMount","socket","io","path","query","on","success","console","log","sdp","textref","value","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","urls","onicecandidate","e","sendToPeer","oniceconnectionstatechange","ontrack","remoteVideoref","current","srcObject","streams","navigator","mediaDevices","getUserMedia","audio","video","then","stream","window","localStream","localVideoref","addStream","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","addCandidate","forEach","React","createRef","style","zIndex","position","right","width","height","margin","backgroundColor","ref","this","autoPlay","padding","bottom","minWidth","minHeight","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.565741d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { io } from 'socket.io-client';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    this.candidate = []\n  }\n\n  componentDidMount = () => {\n\n    this.socket = io(\n      '/webrtcPeer',\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n\n    this.socket.on('connection-success', success => {\n      console.log(success)\n    })\n\n    this.socket.on('offerOrAnswer', (sdp) => {\n      this.textref.value = JSON.stringify(sdp)\n\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n\n    })\n\n    this.socket.on('candidate', (candidate) => {\n\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    })\n\n    // STUN SERVER\n    const pc_config = {\n      \"iceServers\": [\n        {\n          urls: 'stun:stun.l.google.com:19302'\n        }\n      ]\n    }\n\n    this.pc = new RTCPeerConnection(pc_config)\n\n    this.pc.onicecandidate = (e) => {\n      if (e.candidate)\n        // console.log(JSON.stringify(e.candidate))\n        this.sendToPeer('candidate', e.candidate)\n    }\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    this.pc.ontrack = (e) => {\n      this.remoteVideoref.current.srcObject = e.streams[0]\n    }\n\n    // called when getUserMedia() successfully returns - see below\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    const constraints = {\n      audio: false,\n      video: true,\n    }\n\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n  }\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  createOffer = () => {\n    console.log('Offer')\n\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n\n        this.pc.setLocalDescription(sdp)\n        this.sendToPeer('offerOrAnswer', sdp)\n      })\n  }\n\n  createAnswer = () => {\n    console.log('Answer')\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n\n        this.pc.setLocalDescription(sdp)\n        this.sendToPeer('offerOrAnswer', sdp)\n      })\n  }\n\n  setRemoteDescription = () => {\n    const desc = JSON.parse(this.textref.value)\n\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  }\n\n  addCandidate = () => {\n    this.candidate.forEach(candidate => {\n      console.log(JSON.stringify(candidate))\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <video\n          style={{\n            zIndex: 2,\n            position: 'fixed',\n            right: 0,\n            width: 200,\n            height: 200,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={this.localVideoref}\n          autoPlay>\n        </video>\n        <video\n          style={{\n            zIndex: 1,\n            padding: 'fixed',\n            bottom: 0,\n            minWidth: '100%',\n            minHeight: '100%',\n            backgroundColor: 'black'\n          }}\n          ref={this.remoteVideoref}\n          autoPlay>\n        </video>\n        <br />\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n\n        <br />\n        <textarea ref={ref => { this.textref = ref }} />\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}